"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Loader2, AlertTriangle, Trash2, Plus } from "lucide-react";
import { Template, getAllTemplates } from "@/lib/templates";
import TemplateUploadForm from "@/components/TemplateUploadForm";
import SVGTemplatePreview from "@/components/SVGTemplatePreview";
import DefaultTemplateSelector from "@/components/DefaultTemplateSelector";

export default function TemplateManagerPage() {
  const [templates, setTemplates] = useState<Template[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; template: Template | null }>({
    open: false,
    template: null,
  });
  const [deleting, setDeleting] = useState(false);

  // Fetch templates
  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);

      const templatesData = await getAllTemplates();

      setTemplates(templatesData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Handle template upload success
  const handleUploadSuccess = () => {
    setShowUploadForm(false);
    fetchData(); // Refresh templates
  };

  // Handle template delete
  const handleDeleteTemplate = async (template: Template) => {
    if (!template.isUploaded) {
      setError('Cannot delete built-in templates');
      return;
    }

    setDeleting(true);
    try {
      const response = await fetch(`/api/templates?id=${template.id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Failed to delete template');
      }

      setDeleteDialog({ open: false, template: null });
      fetchData(); // Refresh templates
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete template');
    } finally {
      setDeleting(false);
    }
  };

  // Handle default template updates
  const handleUpdateDefaults = async (brandId: string, defaults: any) => {
    try {
      const response = await fetch('/api/brand-profiles', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: brandId,
          templateDefaults: defaults,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update template defaults');
      }

      // No local state to update since brandProfiles removed
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update defaults');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading templates...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-8 p-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Template Manager</h1>
          <p className="text-muted-foreground mt-1">
            Manage your document templates and set defaults for brand profiles
          </p>
        </div>
        <Button onClick={() => setShowUploadForm(true)} className="bg-blue-600 hover:bg-blue-700">
          <Plus className="h-4 w-4 mr-2" />
          Upload Template
        </Button>
      </div>

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Templates Grid */}
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle>Available Templates ({templates.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {templates.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-muted-foreground">No templates available</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {templates.map((template) => (
                <SVGTemplatePreview
                  key={template.id}
                  template={template}
                  onRemove={template.isUploaded ? () =>
                    setDeleteDialog({ open: true, template })
                    : undefined
                  }
                />
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Default Template Settings */}
      <DefaultTemplateSelector
        templates={templates}
        brandProfiles={[]}
        activeBrandId="hdp-works"
        onUpdateDefaults={handleUpdateDefaults}
      />

      {/* Upload Form Modal */}
      <Dialog open={showUploadForm} onOpenChange={setShowUploadForm}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto rounded-2xl">
          <DialogHeader>
            <DialogTitle>Upload New Template</DialogTitle>
          </DialogHeader>
          <TemplateUploadForm onSuccess={handleUploadSuccess} />
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialog.open}
        onOpenChange={(open) => setDeleteDialog({ open, template: null })}
      >
        <DialogContent className="rounded-2xl">
          <DialogHeader>
            <DialogTitle>Delete Template</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p>Are you sure you want to delete the template "{deleteDialog.template?.name}"?</p>
            <p className="text-sm text-muted-foreground mt-2">
              This action cannot be undone.
            </p>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setDeleteDialog({ open: false, template: null })}
              disabled={deleting}
            >
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={() => deleteDialog.template && handleDeleteTemplate(deleteDialog.template)}
              disabled={deleting}
            >
              {deleting && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
